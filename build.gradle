buildscript {
    ext.java_version = '11'
    ext.kotest_version = '4.1.2'
    ext.jfoenix_version = '9.0.10'
    ext.commons_lang3_version = '3.11'
    ext.jnativehook_version = '2.1.0'
    ext.log4j_version = '1.2.17'
    ext.slf4j_version = '1.7.5'
    ext.fontawesomefx_fontawesome_version = '4.7.0-9.1.2'
    ext.fontawesomefx_commons_version = '9.1.2'
    ext.opencv_version = '4.3.0-2'
    ext.commons_io_version = '2.7'
    ext.jackson_module_kotlin_version = '2.11.2'

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://dl.bintray.com/kotlin/kotlinx"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72"
    }
}


plugins {
    id 'application'
    id 'java'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.openjfx.javafxplugin' version '0.0.9'
    id 'org.beryx.jlink' version '2.17.7'
    id 'com.adarshr.test-logger' version '2.0.0'
}

idea {
    module {
        inheritOutputDirs = true
    }
}

def applicationProperties = new Properties()
file("src/main/resources/system/application.properties").withInputStream { applicationProperties.load(it) }

def title = applicationProperties.getProperty("application.title")
project.version = applicationProperties.getProperty("application.version")
project.description = applicationProperties.getProperty("application.description")

group 'com.patres'

mainClassName = 'automationBoot/com.patres.automation.ApplicationLauncher'
project.ext.buildDate = new Date()

sourceCompatibility = "$java_version"

def runArgsValue =  [
        "--add-opens=java.base/java.lang.reflect=com.jfoenix",
        "--add-opens=java.base/java.lang=opencv",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-opens=javafx.controls/javafx.scene.control=automationBoot",
        "--add-opens=javafx.graphics/javafx.scene=automationBoot"
]

javafx {
    version = "11.0.2"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing']
}
repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "https://dl.bintray.com/kotlin/kotlinx"
    }
}

dependencies {
    testImplementation "io.kotest:kotest-runner-junit5-jvm:$kotest_version"
    testImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version"
    testImplementation "io.kotest:kotest-property-jvm:$kotest_version"

    implementation "com.jfoenix:jfoenix:$jfoenix_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.3.72"

    implementation "org.apache.commons:commons-lang3:$commons_lang3_version"
    implementation "com.1stleg:jnativehook:$jnativehook_version"

    implementation "log4j:log4j:$log4j_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"
    implementation "org.slf4j:slf4j-log4j12:$slf4j_version"

    implementation "de.jensd:fontawesomefx-fontawesome:$fontawesomefx_fontawesome_version"
    implementation "de.jensd:fontawesomefx-commons:$fontawesomefx_commons_version"

    implementation "commons-io:commons-io:$commons_io_version"
    implementation "org.openpnp:opencv:$opencv_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_module_kotlin_version"
}


compileKotlin {
    kotlinOptions {
        jvmTarget = "$java_version"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "$java_version"
    }
}

run {
    jvmArgs = runArgsValue
}

jlink {
    addExtraDependencies("javafx")
    mergedModule {
        additive = true
        uses "kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper"
        uses "kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition"
        uses "kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader"
    }

    launcher {
        name = title
        jvmArgs = runArgsValue
    }

    jpackage {
        installerType = 'exe'
        appVersion = project.version
        outputDir = "../release/${project.version}"
        installerOptions = [
                '--description', description,
                '--copyright', 'Copyrigth 2020 Patres - Patryk Piechaczek'
        ]
        imageOptions += ['--icon', 'src/main/resources/icon/desktop/main_icon.ico']
        if (installerType == 'exe') {
            installerOptions += [
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut'
            ]
        }

        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'src/main/resources/icon/desktop/main_icon.icns']
        }

        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/main/resources/icon/desktop/main_icon.ico']
            installerOptions += [
                    '--linux-shortcut'
            ]
        }
    }
}

test {
    useJUnitPlatform()
}

// Create Installer =======================================
task createInstaller {
    doFirst {
        println 'Create Installer'
    }

    doLast {
        println 'Remove unused installer directory'
        def isDeleted = project.delete(files("${rootDir}\\release\\${project.version}\\$title"))
        println "Directory is deleted: ${isDeleted}"
    }

}

createInstaller.dependsOn jpackage
// ========================================================

task packageExecutableZip(type: Zip) {
    archiveFileName = "${title}-${project.version}.zip"
    destinationDirectory = file("${rootDir}\\release\\${project.version}")
    from "$buildDir/image"
}
